// Code generated by Prisma (prisma@1.25.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  account: (where?: AccountWhereInput) => Promise<boolean>;
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  store: (where?: StoreWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  account: (where: AccountWhereUniqueInput) => AccountPromise;
  accounts: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Account>;
  accountsConnection: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountConnectionPromise;
  company: (where: CompanyWhereUniqueInput) => CompanyPromise;
  companies: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Company>;
  companiesConnection: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyConnectionPromise;
  store: (where: StoreWhereUniqueInput) => StorePromise;
  stores: (args?: {
    where?: StoreWhereInput;
    orderBy?: StoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Store>;
  storesConnection: (args?: {
    where?: StoreWhereInput;
    orderBy?: StoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StoreConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount: (data: AccountCreateInput) => AccountPromise;
  updateAccount: (args: {
    data: AccountUpdateInput;
    where: AccountWhereUniqueInput;
  }) => AccountPromise;
  updateManyAccounts: (args: {
    data: AccountUpdateManyMutationInput;
    where?: AccountWhereInput;
  }) => BatchPayloadPromise;
  upsertAccount: (args: {
    where: AccountWhereUniqueInput;
    create: AccountCreateInput;
    update: AccountUpdateInput;
  }) => AccountPromise;
  deleteAccount: (where: AccountWhereUniqueInput) => AccountPromise;
  deleteManyAccounts: (where?: AccountWhereInput) => BatchPayloadPromise;
  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (args: {
    data: CompanyUpdateInput;
    where: CompanyWhereUniqueInput;
  }) => CompanyPromise;
  updateManyCompanies: (args: {
    data: CompanyUpdateManyMutationInput;
    where?: CompanyWhereInput;
  }) => BatchPayloadPromise;
  upsertCompany: (args: {
    where: CompanyWhereUniqueInput;
    create: CompanyCreateInput;
    update: CompanyUpdateInput;
  }) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createStore: (data: StoreCreateInput) => StorePromise;
  updateStore: (args: {
    data: StoreUpdateInput;
    where: StoreWhereUniqueInput;
  }) => StorePromise;
  updateManyStores: (args: {
    data: StoreUpdateManyMutationInput;
    where?: StoreWhereInput;
  }) => BatchPayloadPromise;
  upsertStore: (args: {
    where: StoreWhereUniqueInput;
    create: StoreCreateInput;
    update: StoreUpdateInput;
  }) => StorePromise;
  deleteStore: (where: StoreWhereUniqueInput) => StorePromise;
  deleteManyStores: (where?: StoreWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account: (
    where?: AccountSubscriptionWhereInput
  ) => AccountSubscriptionPayloadSubscription;
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  store: (
    where?: StoreSubscriptionWhereInput
  ) => StoreSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StoreOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "storeId_ASC"
  | "storeId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AccountOrderByInput =
  | "email_ASC"
  | "email_DESC"
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AccountWhereUniqueInput = AtLeastOne<{
  email: String;
  id?: Int;
  username?: String;
}>;

export interface CompanyWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  user?: AccountWhereInput;
  AND?: CompanyWhereInput[] | CompanyWhereInput;
  OR?: CompanyWhereInput[] | CompanyWhereInput;
  NOT?: CompanyWhereInput[] | CompanyWhereInput;
}

export interface AccountWhereInput {
  companies_every?: CompanyWhereInput;
  companies_some?: CompanyWhereInput;
  companies_none?: CompanyWhereInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  stores_every?: StoreWhereInput;
  stores_some?: StoreWhereInput;
  stores_none?: StoreWhereInput;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  AND?: AccountWhereInput[] | AccountWhereInput;
  OR?: AccountWhereInput[] | AccountWhereInput;
  NOT?: AccountWhereInput[] | AccountWhereInput;
}

export interface StoreWhereInput {
  company?: CompanyWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  storeId?: String;
  storeId_not?: String;
  storeId_in?: String[] | String;
  storeId_not_in?: String[] | String;
  storeId_lt?: String;
  storeId_lte?: String;
  storeId_gt?: String;
  storeId_gte?: String;
  storeId_contains?: String;
  storeId_not_contains?: String;
  storeId_starts_with?: String;
  storeId_not_starts_with?: String;
  storeId_ends_with?: String;
  storeId_not_ends_with?: String;
  user?: AccountWhereInput;
  AND?: StoreWhereInput[] | StoreWhereInput;
  OR?: StoreWhereInput[] | StoreWhereInput;
  NOT?: StoreWhereInput[] | StoreWhereInput;
}

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export type StoreWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface AccountCreateInput {
  companies?: CompanyCreateManyWithoutUserInput;
  email: String;
  stores?: StoreCreateManyWithoutUserInput;
  username: String;
}

export interface CompanyCreateManyWithoutUserInput {
  create?: CompanyCreateWithoutUserInput[] | CompanyCreateWithoutUserInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
}

export interface CompanyCreateWithoutUserInput {
  name?: String;
}

export interface StoreCreateManyWithoutUserInput {
  create?: StoreCreateWithoutUserInput[] | StoreCreateWithoutUserInput;
  connect?: StoreWhereUniqueInput[] | StoreWhereUniqueInput;
}

export interface StoreCreateWithoutUserInput {
  company?: CompanyCreateOneInput;
  storeId: String;
}

export interface CompanyCreateOneInput {
  create?: CompanyCreateInput;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyCreateInput {
  name?: String;
  user?: AccountCreateOneWithoutCompaniesInput;
}

export interface AccountCreateOneWithoutCompaniesInput {
  create?: AccountCreateWithoutCompaniesInput;
  connect?: AccountWhereUniqueInput;
}

export interface AccountCreateWithoutCompaniesInput {
  email: String;
  stores?: StoreCreateManyWithoutUserInput;
  username: String;
}

export interface AccountUpdateInput {
  companies?: CompanyUpdateManyWithoutUserInput;
  email?: String;
  stores?: StoreUpdateManyWithoutUserInput;
  username?: String;
}

export interface CompanyUpdateManyWithoutUserInput {
  create?: CompanyCreateWithoutUserInput[] | CompanyCreateWithoutUserInput;
  delete?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  disconnect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  update?:
    | CompanyUpdateWithWhereUniqueWithoutUserInput[]
    | CompanyUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | CompanyUpsertWithWhereUniqueWithoutUserInput[]
    | CompanyUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  updateMany?:
    | CompanyUpdateManyWithWhereNestedInput[]
    | CompanyUpdateManyWithWhereNestedInput;
}

export interface CompanyUpdateWithWhereUniqueWithoutUserInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateWithoutUserDataInput;
}

export interface CompanyUpdateWithoutUserDataInput {
  name?: String;
}

export interface CompanyUpsertWithWhereUniqueWithoutUserInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateWithoutUserDataInput;
  create: CompanyCreateWithoutUserInput;
}

export interface CompanyScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  OR?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
  NOT?: CompanyScalarWhereInput[] | CompanyScalarWhereInput;
}

export interface CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput;
  data: CompanyUpdateManyDataInput;
}

export interface CompanyUpdateManyDataInput {
  name?: String;
}

export interface StoreUpdateManyWithoutUserInput {
  create?: StoreCreateWithoutUserInput[] | StoreCreateWithoutUserInput;
  delete?: StoreWhereUniqueInput[] | StoreWhereUniqueInput;
  connect?: StoreWhereUniqueInput[] | StoreWhereUniqueInput;
  disconnect?: StoreWhereUniqueInput[] | StoreWhereUniqueInput;
  update?:
    | StoreUpdateWithWhereUniqueWithoutUserInput[]
    | StoreUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | StoreUpsertWithWhereUniqueWithoutUserInput[]
    | StoreUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: StoreScalarWhereInput[] | StoreScalarWhereInput;
  updateMany?:
    | StoreUpdateManyWithWhereNestedInput[]
    | StoreUpdateManyWithWhereNestedInput;
}

export interface StoreUpdateWithWhereUniqueWithoutUserInput {
  where: StoreWhereUniqueInput;
  data: StoreUpdateWithoutUserDataInput;
}

export interface StoreUpdateWithoutUserDataInput {
  company?: CompanyUpdateOneInput;
  storeId?: String;
}

export interface CompanyUpdateOneInput {
  create?: CompanyCreateInput;
  update?: CompanyUpdateDataInput;
  upsert?: CompanyUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface CompanyUpdateDataInput {
  name?: String;
  user?: AccountUpdateOneWithoutCompaniesInput;
}

export interface AccountUpdateOneWithoutCompaniesInput {
  create?: AccountCreateWithoutCompaniesInput;
  update?: AccountUpdateWithoutCompaniesDataInput;
  upsert?: AccountUpsertWithoutCompaniesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: AccountWhereUniqueInput;
}

export interface AccountUpdateWithoutCompaniesDataInput {
  email?: String;
  stores?: StoreUpdateManyWithoutUserInput;
  username?: String;
}

export interface AccountUpsertWithoutCompaniesInput {
  update: AccountUpdateWithoutCompaniesDataInput;
  create: AccountCreateWithoutCompaniesInput;
}

export interface CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput;
  create: CompanyCreateInput;
}

export interface StoreUpsertWithWhereUniqueWithoutUserInput {
  where: StoreWhereUniqueInput;
  update: StoreUpdateWithoutUserDataInput;
  create: StoreCreateWithoutUserInput;
}

export interface StoreScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  storeId?: String;
  storeId_not?: String;
  storeId_in?: String[] | String;
  storeId_not_in?: String[] | String;
  storeId_lt?: String;
  storeId_lte?: String;
  storeId_gt?: String;
  storeId_gte?: String;
  storeId_contains?: String;
  storeId_not_contains?: String;
  storeId_starts_with?: String;
  storeId_not_starts_with?: String;
  storeId_ends_with?: String;
  storeId_not_ends_with?: String;
  AND?: StoreScalarWhereInput[] | StoreScalarWhereInput;
  OR?: StoreScalarWhereInput[] | StoreScalarWhereInput;
  NOT?: StoreScalarWhereInput[] | StoreScalarWhereInput;
}

export interface StoreUpdateManyWithWhereNestedInput {
  where: StoreScalarWhereInput;
  data: StoreUpdateManyDataInput;
}

export interface StoreUpdateManyDataInput {
  storeId?: String;
}

export interface AccountUpdateManyMutationInput {
  email?: String;
  username?: String;
}

export interface CompanyUpdateInput {
  name?: String;
  user?: AccountUpdateOneWithoutCompaniesInput;
}

export interface CompanyUpdateManyMutationInput {
  name?: String;
}

export interface StoreCreateInput {
  company?: CompanyCreateOneInput;
  storeId: String;
  user?: AccountCreateOneWithoutStoresInput;
}

export interface AccountCreateOneWithoutStoresInput {
  create?: AccountCreateWithoutStoresInput;
  connect?: AccountWhereUniqueInput;
}

export interface AccountCreateWithoutStoresInput {
  companies?: CompanyCreateManyWithoutUserInput;
  email: String;
  username: String;
}

export interface StoreUpdateInput {
  company?: CompanyUpdateOneInput;
  storeId?: String;
  user?: AccountUpdateOneWithoutStoresInput;
}

export interface AccountUpdateOneWithoutStoresInput {
  create?: AccountCreateWithoutStoresInput;
  update?: AccountUpdateWithoutStoresDataInput;
  upsert?: AccountUpsertWithoutStoresInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: AccountWhereUniqueInput;
}

export interface AccountUpdateWithoutStoresDataInput {
  companies?: CompanyUpdateManyWithoutUserInput;
  email?: String;
  username?: String;
}

export interface AccountUpsertWithoutStoresInput {
  update: AccountUpdateWithoutStoresDataInput;
  create: AccountCreateWithoutStoresInput;
}

export interface StoreUpdateManyMutationInput {
  storeId?: String;
}

export interface AccountSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AccountWhereInput;
  AND?: AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput;
  OR?: AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput;
  NOT?: AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyWhereInput;
  AND?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  OR?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  NOT?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
}

export interface StoreSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StoreWhereInput;
  AND?: StoreSubscriptionWhereInput[] | StoreSubscriptionWhereInput;
  OR?: StoreSubscriptionWhereInput[] | StoreSubscriptionWhereInput;
  NOT?: StoreSubscriptionWhereInput[] | StoreSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Account {
  email: String;
  id: Int;
  username: String;
}

export interface AccountPromise extends Promise<Account>, Fragmentable {
  companies: <T = FragmentableArray<Company>>(args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<String>;
  id: () => Promise<Int>;
  stores: <T = FragmentableArray<Store>>(args?: {
    where?: StoreWhereInput;
    orderBy?: StoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  username: () => Promise<String>;
}

export interface AccountSubscription
  extends Promise<AsyncIterator<Account>>,
    Fragmentable {
  companies: <T = Promise<AsyncIterator<CompanySubscription>>>(args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  stores: <T = Promise<AsyncIterator<StoreSubscription>>>(args?: {
    where?: StoreWhereInput;
    orderBy?: StoreOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  username: () => Promise<AsyncIterator<String>>;
}

export interface Company {
  id: Int;
  name?: String;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  user: <T = AccountPromise>() => T;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  user: <T = AccountSubscription>() => T;
}

export interface Store {
  id: Int;
  storeId: String;
}

export interface StorePromise extends Promise<Store>, Fragmentable {
  company: <T = CompanyPromise>() => T;
  id: () => Promise<Int>;
  storeId: () => Promise<String>;
  user: <T = AccountPromise>() => T;
}

export interface StoreSubscription
  extends Promise<AsyncIterator<Store>>,
    Fragmentable {
  company: <T = CompanySubscription>() => T;
  id: () => Promise<AsyncIterator<Int>>;
  storeId: () => Promise<AsyncIterator<String>>;
  user: <T = AccountSubscription>() => T;
}

export interface AccountConnection {
  pageInfo: PageInfo;
  edges: AccountEdge[];
}

export interface AccountConnectionPromise
  extends Promise<AccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountEdge>>() => T;
  aggregate: <T = AggregateAccountPromise>() => T;
}

export interface AccountConnectionSubscription
  extends Promise<AsyncIterator<AccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountEdge {
  node: Account;
  cursor: String;
}

export interface AccountEdgePromise extends Promise<AccountEdge>, Fragmentable {
  node: <T = AccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountEdgeSubscription
  extends Promise<AsyncIterator<AccountEdge>>,
    Fragmentable {
  node: <T = AccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount {
  count: Int;
}

export interface AggregateAccountPromise
  extends Promise<AggregateAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountSubscription
  extends Promise<AsyncIterator<AggregateAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StoreConnection {
  pageInfo: PageInfo;
  edges: StoreEdge[];
}

export interface StoreConnectionPromise
  extends Promise<StoreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StoreEdge>>() => T;
  aggregate: <T = AggregateStorePromise>() => T;
}

export interface StoreConnectionSubscription
  extends Promise<AsyncIterator<StoreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStoreSubscription>() => T;
}

export interface StoreEdge {
  node: Store;
  cursor: String;
}

export interface StoreEdgePromise extends Promise<StoreEdge>, Fragmentable {
  node: <T = StorePromise>() => T;
  cursor: () => Promise<String>;
}

export interface StoreEdgeSubscription
  extends Promise<AsyncIterator<StoreEdge>>,
    Fragmentable {
  node: <T = StoreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStore {
  count: Int;
}

export interface AggregateStorePromise
  extends Promise<AggregateStore>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStoreSubscription
  extends Promise<AsyncIterator<AggregateStore>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AccountSubscriptionPayload {
  mutation: MutationType;
  node: Account;
  updatedFields: String[];
  previousValues: AccountPreviousValues;
}

export interface AccountSubscriptionPayloadPromise
  extends Promise<AccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountPreviousValuesPromise>() => T;
}

export interface AccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountPreviousValuesSubscription>() => T;
}

export interface AccountPreviousValues {
  email: String;
  id: Int;
  username: String;
}

export interface AccountPreviousValuesPromise
  extends Promise<AccountPreviousValues>,
    Fragmentable {
  email: () => Promise<String>;
  id: () => Promise<Int>;
  username: () => Promise<String>;
}

export interface AccountPreviousValuesSubscription
  extends Promise<AsyncIterator<AccountPreviousValues>>,
    Fragmentable {
  email: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface CompanyPreviousValues {
  id: Int;
  name?: String;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface StoreSubscriptionPayload {
  mutation: MutationType;
  node: Store;
  updatedFields: String[];
  previousValues: StorePreviousValues;
}

export interface StoreSubscriptionPayloadPromise
  extends Promise<StoreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StorePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StorePreviousValuesPromise>() => T;
}

export interface StoreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StoreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StoreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StorePreviousValuesSubscription>() => T;
}

export interface StorePreviousValues {
  id: Int;
  storeId: String;
}

export interface StorePreviousValuesPromise
  extends Promise<StorePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  storeId: () => Promise<String>;
}

export interface StorePreviousValuesSubscription
  extends Promise<AsyncIterator<StorePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  storeId: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Account",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  },
  {
    name: "Store",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
